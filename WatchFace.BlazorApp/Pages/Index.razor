@page "/"
@using System.Drawing
@using System.Globalization
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Webp
@using SixLabors.ImageSharp.PixelFormats
@using System.Text.Json
@using System.Text.Json.Serialization
@using Resources.Image
@using Resources.Models
@using WatchFace.Parser
@using WatchFace.Parser.Models
@using WatchFace.Parser.Utils
@using Image = Resources.Models.Image
@using SixLabors.Fonts
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing
@using Bitmap = SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Argb32>;
@using Point = SixLabors.ImageSharp.Point
@using PointF = SixLabors.ImageSharp.PointF
@using Reader = WatchFace.Parser.Reader
@using Rectangle = System.Drawing.Rectangle
@using Writer = WatchFace.Parser.Writer
@using Color = System.Color
@inject IJSRuntime JsRuntime

<div class="container">
    <div id="loadingModal" class="modal" tabindex="-1" role="dialog" data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body" style="text-align: center">
                    <div class="spinner-border m-5" style="width: 6rem; height: 6rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h5>Please, wait...</h5>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-2" style="border-bottom: 0.8rem deepskyblue dotted; padding: 0.2rem;">
        <div class="col-xl-4 col-12" id="logo-holder" style="height: 4rem"></div>
        <div class="col-xl-4 col-6">
            <input class="form-control" placeholder="WatchFace.bin" id="fileName" value="@_name">
        </div>
        <div class="col-xl-2 col-3">
            <button class="btn btn-dark" onclick="document.getElementById('file').click()" style="width:100%">Open</button>
            <InputFile hidden id="file" OnChange="LoadFile"/>
        </div>
        <div class="col-xl-2 col-3">
            <button class="btn btn-dark" @onclick="SaveFile" style="width:100%">Save</button>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-xl-2 col-4">
            <img id="preview" src="@_preview" width="176" height="176" style="border: 4px forestgreen dotted" alt="preview" />
            <p>
                <label style="width: 100%" for="sample-time">Time:</label>
                <input id="sample-time" type="datetime-local" style="width: 100%" onchange="@SetSampleTime" value="@_sampleTime.ToString("s")"/>
            </p>
            <p>
                <label style="width: 100%" for="sample-battery">Battery:</label>
                <input id="sample-battery" type="range" min="0" max="100" style="width: 100%" onchange="@SetSampleBattery" value="@_sampleBattery"/>
            </p>
            <p>
                <label style="width: 100%" for="sample-distance">Steps:</label>
                <input id="sample-distance" type="number" min="0" style="width: 70px" onchange="@SetSampleDistance" value="@_sampleDistance"/> m
                <br/>
                <input id="sample-steps" type="number" min="0" style="width: 70px" onchange="@SetSampleSteps" value="@_sampleSteps"/>
                /
                <input id="sample-goal" type="number" min="0" style="width: 70px" onchange="@SetSampleGoal" value="@_sampleGoal"/>
            </p>
        </div>

        <div class="col-xl-4 col-8">
            <textarea id="json" class="form-control" style="font-family:monospace" rows="16"></textarea>
            <button class="btn btn-primary" @onclick="PreviewFile" style="width:100%; margin-top:0.5rem">Validate and Render</button>
            <div style="display: flex; margin: 0.5ex; gap: 0.5ex">
                <b>Color picker</b>
                <input hidden id="color" type="color" value="@($"#{_colorPicker:x6}")" onchange="@SetColorPicker"/>
                <div id="color-preview"
                     style="background: @($"#{_colorPicker:x6}"); width: 10ex; border: black .1ex solid;"
                     onclick="document.getElementById('color').click()"></div>
                <input id="color-dec" type="number" width="10ex" value="@(_colorPicker*256)" onchange="@SetColorPicker"/>
            </div>
        </div>

        <div class="col-xl-6 col-12">
            <div class="container">
                <div class="row" style="overflow: scroll; white-space: nowrap">
                    @for (var index = 0; index < _images.Count; index++)
                    {
                        <div class="col-4" style="display: inline-block; float: none">
                            @{var id = "image-" + index;}
                            <InputFile hidden id="@id" OnChange="LoadImage(index)"/>
                            <a href="#" onclick="document.getElementById('@id').click()">📁</a>
                            <a href="#" onclick="@GenerateImage(index)" data-bs-toggle="modal" data-bs-target="#generator-modal">🆎</a>
                            <a href="#" onclick="@DuplicateImage(index)">🔁</a>
                            <a href="#" onclick="@RemoveImage(index)">🗑️</a>
                            <br/>
                            @if (index > 0)
                            {
                                <a href="#" onclick="@MoveImageBackward(index)">⬅️</a>
                            }
                            #@index (@_images[index].Width*@_images[index].Height)
                            @if (index < _images.Count - 1)
                            {
                                <a href="#" onclick="@MoveImageForward(index)">➡️</a>
                            }
                            <p>
                                <img src="@_renderedImages[index]" alt="@index" style="outline: 4px deeppink dotted"/>
                            </p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" id="generator-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Generate image #@_generateImageId</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="display: grid; grid-template-columns: repeat(2, 1fr); grid-template-rows: repeat(9, 1fr); gap: 8px;">
                <div style="grid-row: span 5 / span 5; display: flex; justify-content: center; align-items: center;">
                    <img id="texture-preview" src="@_generatedImagePreview" alt="generating" style="outline: 4px deeppink dotted"/>
                </div>

                <div>
                    X: <input style="width: 25%" type="number" id="position-x" value="@_generatePositionX" onchange="@SetPositionX"/>
                    Y: <input style="width: 25%" type="number" id="position-y" value="@_generatePositionY" onchange="@SetPositionY"/>
                    <br/>
                    W: <input style="width: 25%" type="number" id="position-w" value="@_generatePositionW" onchange="@SetPositionW"/>
                    H: <input style="width: 25%" type="number" id="position-h" value="@_generatePositionH" onchange="@SetPositionH"/>
                </div>
                <div>
                    <div>Background:</div>
                    <div style="width: 25%" class="btn-group dropdown">
                        <button style="background:@(_generateBackgroundColor ?? WatchColor.White); color:gray;" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">@(_generateBackgroundColor?.ToString() ?? "None")</button>
                        <ul class="dropdown-menu">
                            <li><a style="background:gray; color:black;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(null)">None</a></li>
                            <li><a style="background:black; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Black)">Black</a></li>
                            <li><a style="background:white; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.White)">White</a></li>
                            <li><a style="background:red; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Red)">Red</a></li>
                            <li><a style="background:green; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Green)">Green</a></li>
                            <li><a style="background:blue; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Blue)">Blue</a></li>
                            <li><a style="background:yellow; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Yellow)">Yellow</a></li>
                            <li><a style="background:pink; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Pink)">Pink</a></li>
                            <li><a style="background:aqua; color:gray;" class="dropdown-item" href="#" onclick="@SetBackgroundColor(WatchColor.Aqua)">Aqua</a></li>
                        </ul>
                    </div>
                </div>
                <div>
                    <div>
                        <input type="checkbox" id="keep-foreground" value="@_generateKeepForeground" onchange="@SetKeepForeground"/>
                        Old image:
                    </div>
                    X: <input style="width: 25%" type="number" id="position-a" value="@_generatePositionA" onchange="@SetPositionA"/>
                    Y: <input style="width: 25%" type="number" id="position-b" value="@_generatePositionB" onchange="@SetPositionB"/>
                </div>
                <div>
                    <div>Text color:</div>
                    <div style="width: 25%" class="btn-group dropdown">
                        <button style="background:@(_generateForegroundColor); color:gray;" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">@_generateForegroundColor</button>
                        <ul class="dropdown-menu">
                            <li><a style="background:black; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Black)">Black</a></li>
                            <li><a style="background:white; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.White)">White</a></li>
                            <li><a style="background:red; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Red)">Red</a></li>
                            <li><a style="background:green; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Green)">Green</a></li>
                            <li><a style="background:blue; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Blue)">Blue</a></li>
                            <li><a style="background:yellow; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Yellow)">Yellow</a></li>
                            <li><a style="background:pink; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Pink)">Pink</a></li>
                            <li><a style="background:aqua; color:gray;" class="dropdown-item" href="#" onclick="@SetForegroundColor(WatchColor.Aqua)">Aqua</a></li>
                        </ul>
                    </div>
                </div>
                <div>
                    <div style="@(_generateFont == null ? "color: red; animation: blink 1s ease infinite;" : "")">Font:</div>
                    <InputFile id="font" OnChange="LoadFont" style="width: 40%"/>
                    <input style="width: 25%" type="number" id="font-size" value="@_generateFontSize" onchange="@SetFontSize"/>
                </div>

                <textarea id="generator-text" class="form-control" style="grid-row: span 4 / span 4; grid-column: span 2 / span 2; width:100%" onchange="@UpdateGenerateText">@_generateText</textarea>
            </div>
            <div class="modal-footer">
                <div class="btn-group dropup">
                    <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">📅 Generate calendar</button>
                    <ul class="dropdown-menu">
                        <li><input class="form-control" type="text" id="generator-date" placeholder="@(DateTime.Now.ToString("yyyy-MM"))" /></li>
                        <li><a class="dropdown-item" href="#" onclick="doGenerateCalendar('generator-date', 'generator-text', 0)">From Sunday</a></li>
                        <li><a class="dropdown-item" href="#" onclick="doGenerateCalendar('generator-date', 'generator-text', 1)">From Monday</a></li>
                    </ul>
                </div>
                <button type="button" class="btn btn-primary" onclick="@SaveImage">Save</button>
            </div>
        </div>
    </div>
</div>

@code{
    private static readonly JsonSerializerOptions JsonOptions = new()
    {
        DefaultIgnoreCondition = JsonIgnoreCondition.Never,
        WriteIndented = true,
    };

    private static readonly Bitmap EmptyImage = new(176, 176);
    private static readonly string EmptyImagePreview = EmptyImage.ToBase64String(WebpFormat.Instance);
    private string _name = string.Empty;
    private List<Bitmap> _images = new() { EmptyImage };

    private List<string> _renderedImages = new() { EmptyImagePreview };

    private string _generateText = "Text";
    private Bitmap _generatedImage;
    private string _generatedImagePreview = EmptyImagePreview;
    private uint _colorPicker;
    private int _generateImageId;
    private bool _generateKeepForeground;
    private int _generatePositionX;
    private int _generatePositionY;
    private int _generatePositionA;
    private int _generatePositionB;
    private int _generatePositionW;
    private int _generatePositionH;
    private WatchColor? _generateBackgroundColor;
    private WatchColor _generateForegroundColor;
    private FontFamily? _generateFont;
    private int _generateFontSize = 9;
    private string _preview = EmptyImagePreview;
    private DateTime _sampleTime = DateTime.Now;
    private int _sampleBattery = 85;
    private bool _sampleAlarm;
    private bool _sampleBluetooth;
    private int _sampleCalories;
    private int _sampleDistance = 500;
    private int _sampleSteps = 1000;
    private int _sampleGoal = 3000;
    private int? _samplePulse;
    private bool _sampleUnlocked;
    private AirCondition _sampleAirQuality;
    private int? _sampleAirQualityIndex;
    private bool _sampleNotDisturb;
    private WeatherCondition _sampleWeather;
    private int? _sampleTemperatureNow;
    private int? _sampleTemperatureDay;
    private int? _sampleTemperatureNight;
    private int? _sampleTemperatureTomDay;
    private int? _sampleTemperatureTomNight;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initCodeMirror");
        }
    }

    private ValueTask<string> GetJsonAsync()
    {
        return JsRuntime.InvokeAsync<string>("codeMirrorEditor.getValue");
    }

    private async Task LoadFile(InputFileChangeEventArgs args)
    {
        var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("showModal", "loadingModal");
        _name = args.File.Name;
        _preview = EmptyImagePreview;

        try
        {
            var buffer = new byte[args.File.Size];
            await using var stream = args.File.OpenReadStream();
            await stream.ReadExactlyAsync(buffer);
            using var memory = new MemoryStream(buffer);
            var reader = new Reader(memory);
            reader.Read();
            _images = new List<Bitmap>(reader.Images);
            _renderedImages = new List<string>(reader.Images.Select(i => i.ToBase64String(WebpFormat.Instance)));

            var parameters = ParametersConverter.Parse<WatchFace>(reader.Parameters);
            await JsRuntime.InvokeVoidAsync("codeMirrorEditor.setValue", JsonSerializer.Serialize(parameters, JsonOptions));
            await DoPreviewFile();
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.ToString());
            throw;
        }
        finally
        {
            await JsRuntime.InvokeVoidAsync("closeModal", modal);
        }
    }

    private async Task PreviewFile(MouseEventArgs arg)
    {
        var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("showModal", "loadingModal");
        await Task.Yield();

        try
        {
            await DoPreviewFile();
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.ToString());
            throw;
        }        
        finally
        {
            await JsRuntime.InvokeVoidAsync("closeModal", modal);
        }
    }

    private async Task DoPreviewFile()
    {
        var parameters = JsonSerializer.Deserialize<WatchFace>(await GetJsonAsync(), JsonOptions)
                      ?? throw new InvalidOperationException("Json error!");

        var image = PreviewGenerator.CreateImage(ParametersConverter.Build(parameters), _images.ToArray(), new()
        {
            Time = _sampleTime,
            BatteryLevel = _sampleBattery,
            Alarm = _sampleAlarm,
            Bluetooth = _sampleBluetooth,
            Calories = _sampleCalories,
            Distance = _sampleDistance,
            Goal = _sampleGoal,
            Pulse = _samplePulse,
            Steps = _sampleSteps,
            Unlocked = _sampleUnlocked,
            AirQuality = _sampleAirQuality,
            AirQualityIndex = _sampleAirQualityIndex,
            DoNotDisturb = _sampleNotDisturb,
            CurrentWeather = _sampleWeather,
            CurrentTemperature = _sampleTemperatureNow,
            DayTemperature = _sampleTemperatureDay,
            NightTemperature = _sampleTemperatureNight,
            TomorrowDayTemperature = _sampleTemperatureTomDay,
            TomorrowNightTemperature = _sampleTemperatureTomNight,
        });

        _preview = image.Bitmap.ToBase64String(WebpFormat.Instance);
    }

    private async Task SaveFile(MouseEventArgs arg)
    {
        var modal = await JsRuntime.InvokeAsync<IJSObjectReference>("showModal", "loadingModal");
        try
        {
            var parameters = JsonSerializer.Deserialize<WatchFace>(await GetJsonAsync(), JsonOptions)
                          ?? throw new InvalidOperationException("Json error!");

            using var memory = new MemoryStream();
            var images = _images.Select(i => new Image(i)).ToList<IResource>();
            var writer = new Writer(memory, images);
            writer.Write(ParametersConverter.Build(parameters));
            var bytes = memory.ToArray().Select(value => (int)value).ToList();
            await JsRuntime.InvokeVoidAsync("doSaveFile", _name, bytes);
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.ToString());
            throw;
        }
        finally
        {
            await JsRuntime.InvokeVoidAsync("closeModal", modal);
        }
    }

    private void SetSampleTime(ChangeEventArgs arg)
    {
        _sampleTime = DateTime.Parse((string)arg.Value!);
    }

    private void SetSampleBattery(ChangeEventArgs arg)
    {
        _sampleBattery = int.Parse((string)arg.Value!);
    }

    private void SetSampleCalories(ChangeEventArgs arg)
    {
        _sampleCalories = int.Parse((string)arg.Value!);
    }

    private void SetSampleDistance(ChangeEventArgs arg)
    {
        _sampleDistance = int.Parse((string)arg.Value!);
    }

    private void SetSampleSteps(ChangeEventArgs arg)
    {
        _sampleSteps = int.Parse((string)arg.Value!);
    }

    private void SetSampleGoal(ChangeEventArgs arg)
    {
        _sampleGoal = int.Parse((string)arg.Value!);
    }

    private void SetPositionW(ChangeEventArgs arg)
    {
        _generatePositionW = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetPositionH(ChangeEventArgs arg)
    {
        _generatePositionH = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetPositionA(ChangeEventArgs arg)
    {
        _generatePositionA = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetPositionB(ChangeEventArgs arg)
    {
        _generatePositionB = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetPositionX(ChangeEventArgs arg)
    {
        _generatePositionX = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetPositionY(ChangeEventArgs arg)
    {
        _generatePositionY = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private void SetColorPicker(ChangeEventArgs arg)
    {
        var value = (string)arg.Value!;
        var parsed = value.StartsWith('#')
            ? uint.TryParse(value[1..], NumberStyles.HexNumber, null, out var colorPicker)
            : uint.TryParse(value, out colorPicker);

        Console.WriteLine(value);
        if (parsed && _colorPicker != colorPicker)
        {
            _colorPicker = colorPicker;
            StateHasChanged();
        }
    }

    private void SetKeepForeground(ChangeEventArgs arg)
    {
        _generateKeepForeground = (bool)arg.Value!;
        DoGenerateImage();
        StateHasChanged();
    }

    private Action SetBackgroundColor(WatchColor? color)
    {
        return () =>
        {
            _generateBackgroundColor = color;
            DoGenerateImage();
            StateHasChanged();
        };
    }

    private Action SetForegroundColor(WatchColor color)
    {
        return () =>
        {
            _generateForegroundColor = color;
            DoGenerateImage();
            StateHasChanged();
        };
    }

    private void SetFontSize(ChangeEventArgs arg)
    {
        _generateFontSize = int.Parse((string)arg.Value!);
        DoGenerateImage();
        StateHasChanged();
    }

    private async Task LoadFont(InputFileChangeEventArgs args)
    {
        try
        {
            var buffer = new byte[args.File.Size];
            await using var stream = args.File.OpenReadStream(maxAllowedSize: args.File.Size);
            await stream.ReadAsync(buffer);
            using var memory = new MemoryStream(buffer);
            var fontCollection = new FontCollection();
            _generateFont = fontCollection.Add(memory);
            DoGenerateImage();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.ToString());
            throw;
        }
    }

    private void UpdateGenerateText(ChangeEventArgs arg)
    {
        _generateText = (string)arg.Value!;
        DoGenerateImage();
        StateHasChanged();
    }

    private void DoGenerateImage()
    {
        var bgColor = Color.FromArgb(0);
        if (_generateBackgroundColor is { } color)
        {
            bgColor = Color.FromRgb(((int)color & 0xFF0000) >> 16
                                    | ((int)color & 0x00FF00)
                                    | ((int)color & 0x0000FF) << 16);
        }

        _generatedImage = new Bitmap(_generatePositionW, _generatePositionH, bgColor);

        if (_generateFont != null)
        {
            _generatedImage.Mutate(g =>
            {
                if (_generateKeepForeground)
                {
                    g.DrawImage(_images[_generateImageId], new Point(_generatePositionA, _generatePositionB), 1f);
                }

                var position = new PointF(_generatePositionX, _generatePositionY);
                var color = Color.FromRgb((int)_generateForegroundColor);
                var font = _generateFont.Value.CreateFont(_generateFontSize);
                g.DrawText(_generateText, font, color, position);
            });
        }

        _generatedImagePreview = _generatedImage.ToBase64String(WebpFormat.Instance);
    }

    private void SaveImage()
    {
        DoGenerateImage();

        var clone = new Bitmap(_generatedImage.Width, _generatedImage.Height, PixelFormat.Format32bppArgb);
        clone.Mutate(gr =>
        {
            gr.DrawImage(_generatedImage, new Rectangle(0, 0, clone.Width, clone.Height));
        });

        FloydSteinbergDitherer.Process(clone);
        _images[_generateImageId] = clone;
        _renderedImages[_generateImageId] = _generatedImagePreview;
        StateHasChanged();
    }

    private Func<InputFileChangeEventArgs, Task> LoadImage(int currentIndex)
    {
        return async args =>
        {
            try
            {
                await using var stream = args.File.OpenReadStream();
                var image = _images[currentIndex] = await SixLabors.ImageSharp.Image.LoadAsync<Argb32>(stream);
                var clone = new Bitmap(image.Width, image.Height, PixelFormat.Format32bppArgb);
                clone.Mutate(gr =>
                {
                    gr.DrawImage(image, new Rectangle(0, 0, clone.Width, clone.Height));
                });

                FloydSteinbergDitherer.Process(image);
                _renderedImages[currentIndex] = image.ToBase64String(WebpFormat.Instance);
            }
            catch (Exception e)
            {
                await JsRuntime.InvokeVoidAsync("alert", e.ToString());
                throw;
            }
        };
    }

    private Action RemoveImage(int currentIndex)
    {
        return () => MoveImage(currentIndex, -1);
    }

    private Action MoveImageForward(int currentIndex)
    {
        return () => MoveImage(currentIndex, currentIndex + 1);
    }

    private Action MoveImageBackward(int currentIndex)
    {
        return () => MoveImage(currentIndex, currentIndex - 1);
    }

    private Action DuplicateImage(int currentIndex)
    {
        return () => MoveImage(currentIndex, currentIndex + 1, duplicate: true);
    }

    private void MoveImage(int currentIndex, int newIndex, bool duplicate = false)
    {
        var image = _images[currentIndex];
        var renderedImage = _renderedImages[currentIndex];

        if (!duplicate)
        {
            _images.RemoveAt(currentIndex);
            _renderedImages.RemoveAt(currentIndex);
        }

        if (newIndex >= 0)
        {
            _images.Insert(newIndex, image);
            _renderedImages.Insert(newIndex, renderedImage);
        }

        StateHasChanged();
    }

    private Func<Task> GenerateImage(int id)
    {
        return async () =>
        {
            _generateImageId = id;
            _generatePositionA = _generatePositionB = 0;
            _generatePositionW = _images[id].Width;
            _generatePositionH = _images[id].Height;
            DoGenerateImage();
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("animateTexture");
        };
    }

    [Flags]
    private enum WatchColor
    {
        Black = 0x000000,
        Red = 0xFF0000,
        Green = 0x00FF00,
        Blue = 0x0000FF,
        Yellow = 0xFFFF00,
        Pink = 0xFF00FF,
        Aqua = 0x00FFFF,
        White = 0xFFFFFF,
    }
}
